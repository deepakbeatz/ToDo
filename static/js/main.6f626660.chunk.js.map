{"version":3,"sources":["Components/Navbar.js","Components/Header.js","Components/Footer.js","Components/Main.js","App.js","serviceWorker.js","index.js"],"names":["navbar","class","Navbar","className","expand","Brand","href","aria-hidden","Toggle","aria-controls","Collapse","id","Nav","Link","Component","header","Radium","footer","style","position","width","backgroundColor","this","props","color","textAlign","height","paddingTop","bottom","dangerouslySetInnerHTML","text","main","state","completeHandler","event","temp","target","checked","name","value","Ctasks","push","setState","Itasks","splice","indexOf","redoHandler","tasks","i","length","type","onChange","getItasks","onClick","bind","getCtasks","app","Header","Main","Footer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6f626660.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nimport {Navbar,Nav} from 'react-bootstrap';\r\nimport './navbar.css';\r\n\r\nclass navbar extends Component{\r\n    render(){\r\n\r\n        return(\r\n            <div class=\"main\">\r\n                <Navbar className=\"navColor\" expand=\"lg\">\r\n                    <Navbar.Brand href=\"#\"><i className=\"fa fa-hand-o-right\" aria-hidden=\"true\"></i>ToDo</Navbar.Brand>\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                        <Nav className=\"mr-auto\">\r\n                            <Nav.Link href=\"#\"><i class=\"fa fa-tasks\"></i>MyTasks</Nav.Link>\r\n                        </Nav>\r\n                        <Nav>\r\n                            <Nav.Link href=\"#\"><i class=\"fas fa-sign-out-alt\"></i>Logout</Nav.Link>\r\n                        </Nav>\r\n                    </Navbar.Collapse>\r\n                </Navbar>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default navbar;","import React,{Component} from 'react';\r\nimport Radium from 'radium'\r\nimport Navbar from './Navbar'\r\n\r\nclass header extends Component{\r\n\r\n    render(){\r\n\r\n        return(\r\n            <div>\r\n                <Navbar />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Radium(header);","import React,{Component} from 'react';\r\nimport Radium from 'radium'\r\nimport './footer.css'\r\nclass footer extends Component{\r\n    \r\n\r\n\r\n    render(){\r\n        var style={\r\n            position:'fixed',\r\n            width:'100%',\r\n            backgroundColor:this.props.color,\r\n            textAlign:'center',\r\n            height:'40px',\r\n            paddingTop:'1%',\r\n            bottom:'0%'\r\n        }\r\n        return(\r\n            <div style={style} class=\"footer\">\r\n               <span dangerouslySetInnerHTML={{ \"__html\": \"&copy;\" }} />{this.props.text}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Radium(footer);","import React,{Component} from 'react';\r\nimport Radium from 'radium'\r\nimport './main.css'\r\nclass main extends Component{\r\n    state={\r\n        \"Itasks\":['complete assignments','play PUBG','meet John'],\r\n        \"Ctasks\":[],\r\n        \r\n    }\r\n    render(){\r\n        const completeHandler=(event)=>{\r\n            let temp=[]\r\n            if(event.target.checked){\r\n                var name=event.target.value\r\n                temp=this.state.Ctasks;\r\n                temp.push(name);\r\n                this.setState({\"Ctasks\":temp})\r\n                var Itasks=this.state.Itasks; \r\n                Itasks.splice(Itasks.indexOf(name), 1);\r\n                this.setState({\"Itasks\":Itasks});\r\n            }\r\n            \r\n        }\r\n\r\n        const redoHandler=(name)=>{\r\n            var Ctasks=this.state.Ctasks;\r\n            Ctasks.splice(Ctasks.indexOf(name), 1);\r\n            this.setState({\"Ctasks\":Ctasks});\r\n            var Itasks=this.state.Itasks; \r\n            Itasks.push(name);\r\n            this.setState({\"Itasks\":Itasks});\r\n        }\r\n\r\n        const getItasks=()=>{\r\n            let tasks=[]\r\n            let temp=this.state.Itasks;\r\n            for(var i=0;i<temp.length;i++){\r\n                tasks.push(<div>{temp[i]}<input type=\"checkbox\" value={temp[i]} onChange={completeHandler} checked={false}></input><br/></div>)\r\n                \r\n            }\r\n            return tasks\r\n        }\r\n\r\n        const getCtasks=()=>{\r\n            let tasks=[]\r\n            let temp=this.state.Ctasks;\r\n            for(var i=0;i<temp.length;i++){\r\n                tasks.push(<div>{temp[i]} <i value={temp[i]} onClick={redoHandler.bind(this,temp[i])} class=\"fas fa-redo\"></i><br /></div>)\r\n            }\r\n            return tasks\r\n        }\r\n        \r\n    \r\n        return(\r\n            <div class=\"main\">\r\n                <div class=\"taskboard\">\r\n                    <h4>TODO</h4>\r\n                    {getItasks()}\r\n                    <hr/>\r\n                    <h4>COMPLETED</h4>\r\n                    <div class=\"completed\">\r\n                        {getCtasks()}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Radium(main);","import React,{Component} from 'react';\nimport Header from './Components/Header';\nimport Footer from './Components/Footer';\nimport Main from './Components/Main';\nimport './App.css';\n\n\nclass app extends Component{\n  render(){\n    return(\n      <div>\n        <Header color=\"#7fd7e3\" text=\"ToDo\" />\n\n        <Main />\n\n        <Footer color=\"#7fd7e3\" text= \"ToDo Ltd.\" />\n      </div>\n    )\n  }\n}\n\nexport default app;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker'; \nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}